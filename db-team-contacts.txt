|-------------------------------------------------------------------------------|
|-------------------------------GENERAL NOTES-----------------------------------|
|-------------------------------------------------------------------------------|
SHOW DATABASES;
SHOW TABLES;
DESCRIBE ...;
|-------------------------------------------------------------------------------|
ALTER TABLE ... ADD INDEX(column_name(# of char));
ALTER TABLE ... ADD PRIMARY KEY(...);
ALTER TABLE table_name ADD CONSTRAINT fk_Pertable_name FOREIGN KEY(...) REFERENCES ...(...);
DROP index index_name ON table_name;
ALTER TABLE table_name DROP PRIMARY KEY;
ALTER TABLE table_name DROP FOREIGN KEY fk_Pertable_name;
|-------------------------------------------------------------------------------|
[<, >, <=, >=, <>,AND, OR, LIKE, BETWEEN... AND..., WHERE...NOT, ASC, DESC]
SELECT ... FROM ...;
SELECT ... FROM ... WHERE ...;
SELECT ... FROM ... WHERE ... ORDER BY ... ASC, ... DESC;
SELECT ... FROM ... WHERE ... IS NULL;
SELECT ... FROM ... WHERE location LIKE '%...%';
SELECT ... FROM ... WHERE ... LIKE '..._';
SELECT ... FROM ... WHERE ... BETWEEN ... AND ...;
SELECT ... FROM ... WHERE ... IN('...', '...', ...);
SELECT ... FROM ... ORDER BY ...;
SELECT DISTINCT ... FROM ... ORDER BY ... LIMIT #;
|-------------------------------------------------------------------------------|
UPDATE ... SET ... WHERE ...;
UPDATE ...
SET ... = 
CASE
	WHEN ... = '%...%' THEN '...'
	WHEN ... = '%...%' THEN '...'
	ELSE '...' 
END;
|-------------------------------------------------------------------------------|
DROP TABLE ...;	
ALTER TABLE ... DROP COLUMN ...;
ALTER TABLE ... RENAME TO ...;
ALTER TABLE ... CHANGE COLUMN ... ... INT NOT NULL AUTO_INCREMENT, ADD PRIMARY KEY(...);
ALTER TABLE ... MODIFY COLUMN ... ...;
ALTER TABLE ... ADD COLUMN ... INT NOT NULL AUTO_INCREMENT FIRST, ADD PRIMARY KEY(...);
ALTER TABLE ... DROP PRIMARY KEY;
DELETE FROM ... WHERE ...;
|-------------------------------------------------------------------------------|
LOCK TABLES tablename1 READ, tablename2 READ ...;
UNLOCK TABLES
|-------------------------------------------------------------------------------|
mysqldump -u user -ppassword db_name                // dump database to the screen
mysqldump -u user -ppassword db_name > filename.sql // dump database to the file, creating backup file
LOCK TABLES db_name.table_name READ;                // backing up a single table
mysqldump -u user -ppassword db_name table_name > filename.sql
UNLOCK TABLES;
mysqldump -u user -ppassword --all-databases > all_databases.sql  // Backing up all tables
mysql -u user -ppassword < all_databases.sql                      // Restoring an entire set of databases
mysql -u user -ppassword < filename.sql                           // Restore the database
mysql -u user -ppassword -D db_name < filename.sql                // Restore the single table
|-------------------------------------------------------------------------------|
ALTER TABLE ... TYPE = InnoDB;  - change the type of the table engine
START TRANSACTION;              - keeps track of all the SQL statements
COMMIT;                         - makes statements permanent, no changes occur until commit
ROLLBACK;                       - reverses everything to the way it was before START TRANSACTION
|-------------------------------------------------------------------------------|
CREATE USER user_name IDENTIFIED BY 'password';- create a new user
SET PASSWORD FOR 'root'@'localhost' = PASSWORD('password');
GRANT SELECT/INSERT/DELETE/UPDATE ON ... TO ...;
GRANT ALL ON *.* TO ...;
GRANT PRIVILEGES ON db_name.table_name TO 'username'@'hostname' IDENTIFIED BY 'password';
REVOKE ... ON FROM ...CASCADE/RESTRICT;
|-------------------------------------------------------------------------------|
1st Normal Form Requirements:
	- Add a primary key to uniquely identify data [uniquely identify a record]
	- Atomic values in each column of a table [no multi-value in a single column]
	- No repeating groups [no columns store the same information]

2nd Normal Form Requirements:
	- All requirements for the 1st Normal Form
	- Move redundant data into a separate table [relate tables by using a foreign key]
	
3rd Normal Form Requirements:
	- All requirements for the 2nd Normal Form
	- Eliminate fields that do not depend on a Primary key [create an intermediary table as the composite key]

|-------------------------------------------------------------------------------|
|----Sample Information for the Construction of the Team Cotacts Database-------|
|-------------------------------------------------------------------------------|

[!No Actual Personal Data are used!]

<!----START MySQL----!>

mysql -u root -p (enter password)

<!----CREATE/USE DATABASE----!>

CREATE DATABASE IF NOT EXISTS team_contacts;
USE team_contacts;

<!----One-To-Many: Team Contacts Profession Table----!>

CREATE TABLE IF NOT EXISTS profession
(
	prof_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
	profession VARCHAR(20) NOT NULL
);

<!----One-To-Many: Team Contacts Zip_Code Table----!>

CREATE TABLE IF NOT EXISTS zip_code
(
	zip_code INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
	city VARCHAR(20) NOT NULL,
	state VARCHAR(20) NOT NULL
);

<!----One-To-Many: Team Contacts Status Table----!>

CREATE TABLE IF NOT EXISTS status
(
	status_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
	status VARCHAR(20) NOT NULL
);

<!----Team Contacts Table----!>

CREATE TABLE IF NOT EXISTS team_contacts
(
	contact_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
	last_name VARCHAR(20) NOT NULL,
	first_name VARCHAR(20) NOT NULL,
	phone VARCHAR(20) NOT NULL,
	email VARCHAR(20) NOT NULL,
	gender VARCHAR(10) NOT NULL,
	birthday DATE,
	prof_id INT(11) NOT NULL,
	zip_code INT(5) NOT NULL,
	status_id INT(11) NOT NULL,
	CONSTRAINT profession_prof_id_fk FOREIGN KEY(prof_id) REFERENCES profession(prof_id),
	CONSTRAINT zip_code_zip_code_fk FOREIGN KEY(zip_code) REFERENCES zip_code(zip_code),
	CONSTRAINT status_status_id_fk FOREIGN KEY(status_id) REFERENCES status(status_id)
);

<!----Seeking Table----!>

CREATE TABLE IF NOT EXISTS seeking
(
	seeking_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
	seeking VARCHAR(20) NOT NULL
);

<!----Many-To-Many Composite Key Table: Team Contacts Seeking Joining Table (Join Contacts and Seeking)----!>

CREATE TABLE IF NOT EXISTS contact_seeking
(
	contact_id INT(11) NOT NULL,
	seeking_id INT(11) NOT NULL,
	CONSTRAINT team_contacts_contact_id_fk FOREIGN KEY(contact_id) REFERENCES team_contacts(contact_id),
	CONSTRAINT seeking_seeking_id_fk FOREIGN KEY(seeking_id) REFERENCES seeking(seeking_id)
);

<!----Interests Table----!>

CREATE TABLE IF NOT EXISTS interests
(
	interest_id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
	interest VARCHAR(20) NOT NULL
);

<!----Many-To-Many Composite Key Table: Team Contacts Seeking Joining Table (Join Contacts and Seeking)----!>

CREATE TABLE IF NOT EXISTS contact_interest
(
	contact_id INT(11) NOT NULL,
	interest_id INT(11) NOT NULL,
	CONSTRAINT team_contacts_contact_id_fk1 FOREIGN KEY(contact_id) REFERENCES team_contacts(contact_id),
	CONSTRAINT interests_interest_id_fk1 FOREIGN KEY(interest_id) REFERENCES interests(interest_id)
);

<!----INSERT VALUES INTO THE TABLES----!>

INSERT INTO profession
VALUES
(null, 'Technical Writer'),
(null, 'Manager'),
(null, 'Cruise Ship Captain'),
(null, 'Software Sales'),
(null, 'System Administrator'),
(null, 'Bookshop Owner'),
(null, 'Unemployed'),
(null, 'UNIX Sysadmin'),
(null, 'Computer Programmer'),
(null, 'salesman');

INSERT INTO zip_code 
VALUES
(11232, 'Brooklyn', 'NY'),
(11206, 'Brooklyn', 'NY'),
(10453, 'New York', 'NY'),
(10010, 'New York', 'NY'),
(10012, 'New York', 'NY'),
(11361, 'Queens', 'NY'),
(10302, 'Staten Island', 'NY'),
(10303, 'Staten Island', 'NY');

INSERT INTO status
VALUES 
(null, 'single'), 
(null, 'divorced'), 
(null, 'married'), 
(null, 'committed relationship');

INSERT INTO interests
VALUES 
(null, 'kayaking'), 
(null, 'reptiles'), 
(null, 'women'), 
(null, 'sailing'), 
(null, 'fishing'), 
(null, 'yachting'),
(null, 'nothing'), 
(null, 'drinking'), 
(null, 'collecting books'), 
(null, 'scuba diving'), 
(null, 'acting'), 
(null, 'dancing'),
(null, 'poetry'), 
(null, 'screenwriting');

INSERT INTO seeking
VALUES 
(null, 'relationship'), 
(null, 'friends'), 
(null, 'women to date'), 
(null, 'women for casual relationships'),
(null, 'new job'), 
(null, 'cooking	employment'), 
(null, 'nothing');

INSERT INTO team_contacts
VALUES
(null, 'Anderson', 'Jillian', '(123) 456-7891', 'jill_anderson@breakneckpizza.com', 'F', '1980-09-05', 1, 11232, 1),
(null, 'Kenton', 'Leo', '(111) 213-1415', 'lkenton@starbuzzcoffee.com', 'M', '1974-01-10', 2, 11206, 2),
(null, 'McGavin', 'Darrin', '(161) 718-1920', 'captainlove@headfirsttheater.com', 'M', '1966-01-23', 3, 10453, 1),
(null, 'Franklin', 'Joe', '(212) 222-3245', 'joe_franklin@leapinlimos.com', 'M', '1977-04-28', 4, 10010, 3),
(null, 'Hamilton', 'Jamie', '(526) 272-8293', 'dontbother@starbuzzcoffee.com', 'F', '1964-09-10', 5, 10012, 3),
(null, 'Chevrolet', 'Maurice', '(313) 233-3435', 'bookman4u@objectville.net', 'M', '1962-07-01', 6, 11361, 3),
(null, 'Kroger', 'Renee', '(363) 738-3940', 'poorrenee@mightygumball.net', 'F', '1976-12-03', 7, 10302, 2),
(null, 'Mendoza', 'Angelina', '(424) 243-4445', 'angelina@starbuzzcoffee.com', 'F', '1979-08-19', 8, 10303, 3),
(null, 'Murphy', 'Donald', '(464) 748-4950', 'padraic@tikibeanlounge.com', 'M', '1967-01-23', 9, 11232, 4),
(null, 'Spatner', 'John', '(515) 253-5455', 'jpoet@objectville.net', 'M', '1963-04-18', 10, 11206, 2);

INSERT INTO contact_interest
VALUES (1,1), (1,2), (2,3), (3,4), (3,5), (3,6), (4,7), (5,8), (5,9), (6,10), (6,11), (7,7), (8,12), (9,12), (10,13), (10,14);

INSERT INTO contact_seeking
VALUES (1,1), (1,2), (2,3), (3,4), (4,5), (4,1), (4,2), (5,2), (6,6), (7,7), (8,5), (9,6), (9,2), (10,3);

<!--Job Current--!>

<!--Job Desired-->

<!----Job Listing Table---->

CARTESIAN JOIN [CROSS JOIN] - values from the table1 joined with each value from the table2.
INNER JOIN - records are combined from two tables where there is a match using comparison operators in a condition.
	EQUIJOIN inner joins test for equality.
	NON-EQUIJOIN inner joins test for inequality.
	NATURAL JOIN combines the two tables that share the same name. [the same result as with equijoin]
OUTER JOIN - returns all rows from one of the tables whether there is a match with the other table or not.
	LEFT OUTER JOIN - matches all rows in the LEFT table [before the join] and matches them to rows in the RIGHT table[after the join].
					  If null, right table has no values that correspond to the left table.
	RIGHT OUTER JOIN - matches all rows in the RIGHT table [after the join] and matches them to rows in the LEFT table[before the join].
					  If null, left table has no values that correspond to the right table.
SELF JOIN - joins a single table to itself.
UNION - combine the results of queries.

<!----CROSS JOIN SELECT STATEMENTS----!>

SELECT team_contacts.last_name, profession.profession FROM team_contacts CROSS JOIN profession;

<!----INNER JOIN SELECT STATEMENT: MANY-TO-MANY RELATIONSHIP----!>

SELECT team_contacts.first_name, team_contacts.last_name, interests.interest FROM team_contacts
INNER JOIN contact_interest
ON team_contacts.contact_id = contact_interest.contact_id
INNER JOIN interests
ON contact_interest.interest_id = interests.interest_id
WHERE team_contacts.last_name = 'Kroger'
GROUP BY team_contacts.last_name
HAVING COUNT(*) < 5;

<!----INNER SELECT STATEMENT: ONE-TO-MANY RELATIONSHIP----!>

SELECT team_contacts.last_name, profession.profession FROM team_contacts
INNER JOIN profession 
ON team_contacts.prof_id = profession.prof_id
GROUP BY team_contacts.last_name;

<!----OUTER JOIN SELECT STATEMENTS----!>

SELECT tc.last_name, prof.profession FROM profession prof LEFT OUTER JOIN team_contacts tc ON tc.prof_id = prof.prof_id;

<!----COUNT THE NUMBER OF DUPLICATES----!>

SELECT team_contacts.gender, COUNT(gender) AS count 
FROM team_contacts
GROUP BY team_contacts.gender
ORDER BY count;

<!----Subquery----!>

SELECT tc.last_name, tc.first_name, inter.interest FROM team_contacts tc INNER JOIN contact_interest ci ON tc.contact_id = ci.contact_id INNER JOIN interests inter ON ci.interest_id = inter.interest_id WHERE EXISTS tc.last_name IN(SELECT last_name FROM team_contacts WHERE gender = 'F');

<!----UNION[no duplicates] / UNION ALL[duplicates]----!>

SELECT last_name FROM team_contacts UNION SELECT interest FROM interests ORDER BY last_name;

